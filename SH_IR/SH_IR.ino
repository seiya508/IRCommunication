//2020.12.11
// ipload to github 2022.02.09
//AlexaとESP32を連携
//赤外線送受信を行う

#ifdef ARDUINO_ARCH_ESP32
#include <WiFi.h>
#else
#include <ESP8266WiFi.h>
#endif
#include <Espalexa.h>

#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <IRutils.h>


//----------Espalexa設定部----------//
// prototypes
boolean connectWifi();

//callback functions
//new callback type, contains device pointer
//テレビ
void controlTVPower(EspalexaDevice* d);
void controlTVChannel(EspalexaDevice* d);
void controlTVVolume(EspalexaDevice* d);
//エアコン
void controlAC(EspalexaDevice* d);
void controlHeater(EspalexaDevice* d);

// WiFi設定
const char* ssid = "hogehoge";
const char* password = "hogehoge";

boolean wifiConnected = false;

Espalexa espalexa;

//----------赤外線設定部----------
const uint16_t kIrLed = 23; //赤外線LEDのピンを取得
IRsend irsend(kIrLed); // 送信オブジェクトの作成
bool success = true; //送信成功判定

//---テレビの赤外線コード---
// ※適宜解析して変更
decode_type_t protocolTV = SONY;
const uint32_t powerValue = 0xA90;  uint16_t powerSize = 12;  //テレビ電源
//const uint32_t sourceValue = 0xA50; uint16_t sourceSize = 12; //入力切替
//チャンネル(順に#1, #2,...)
//const uint32_t channelValue[12] = {0x010, 0x810, 0x410, 0xC10, 
//                                   0x210, 0xA10, 0x610, 0xE10, 
//                                   0x110, 0x910, 0x510, 0xD10};
//uint16_t channelSize = 12;
const uint32_t channelUpValue = 0x90;    uint16_t channelUpSize = 12;   //チャンネル大
const uint32_t channelDownValue = 0x890; uint16_t channelDownSize = 12; //チャンネル小
//音量
//const uint32_t volumeUpValue = 0x490;   uint16_t volumeUpSize = 12;   //音量大
//const uint32_t volumeDownValue = 0xC90; uint16_t volumeDownSize = 12; //音量小
const uint32_t muteValue = 0x290; uint16_t muteSize = 12; //消音

//---エアコンの赤外線コード---
// ※適宜解析して変更
const uint16_t khz = 38;  //周波数

//冷房(28℃, その他自動) Raw
//const uint16_t acValue[440] = {3504, 1756, 452, 420, 452, 1288, 448, 424, 452, 424, 452, 420, 452, 424, 448, 424, 432, 444, 432, 440, 432, 440, 432, 444, 428, 448, 432, 440, 428, 1312, 428, 444, 428, 448, 432, 440, 432, 444, 428, 444, 428, 448, 432, 440, 428, 1308, 432, 1308, 428, 1316, 428, 444, 432, 440, 428, 1312, 428, 448, 428, 444, 432, 440, 432, 444, 428, 448, 428, 444, 432, 440, 432, 440, 432, 448, 428, 444, 428, 444, 432, 440, 432, 444, 432, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 440, 432, 444, 428, 448, 432, 440, 432, 444, 428, 444, 428, 448, 428, 444, 432, 440, 432, 440, 432, 448, 428, 440, 432, 1308, 428, 1312, 428, 448, 428, 444, 432, 444, 428, 444, 428, 440, 432, 10496, 3496, 1764, 452, 420, 452, 1292, 452, 424, 452, 428, 448, 428, 448, 428, 448, 428, 432, 444, 432, 444, 432, 444, 432, 444, 428, 452, 428, 444, 432, 1316, 428, 444, 432, 448, 432, 444, 432, 444, 428, 444, 432, 448, 432, 444, 428, 1316, 428, 1316, 428, 1320, 428, 444, 432, 444, 428, 1316, 428, 452, 428, 448, 428, 444, 432, 428, 428, 432, 428, 428, 432, 428, 428, 428, 432, 428, 432, 428, 428, 428, 428, 428, 432, 448, 432, 1256, 452, 404, 452, 404, 452, 408, 452, 1256, 452, 1256, 452, 404, 452, 412, 452, 404, 452, 404, 452, 404, 452, 1260, 452, 1256, 448, 1260, 448, 408, 452, 408, 452, 404, 456, 404, 452, 404, 452, 412, 448, 408, 452, 404, 452, 404, 452, 1264, 452, 1260, 452, 1260, 452, 1260, 452, 1264, 452, 408, 452, 1260, 452, 408, 452, 1264, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 404, 452, 412, 452, 412, 452, 404, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 408, 456, 404, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 448, 408, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 448, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 404, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 1268, 452, 412, 448, 412, 448, 412, 452, 420, 448, 412, 452, 412, 448, 412, 452, 416, 452, 408, 452, 1268, 448, 1268, 452, 416, 452, 1268, 448, 412, 452, 408, 452, 420, 452, 408, 448, 1268, 452, 408, 456, 1268, 452, 1268, 452, 412, 448, 408, 452, 1272, 448};
//冷房(26℃, その他自動) Raw
const uint16_t acValue[440] = {3496, 1764, 452, 420, 452, 1288, 448, 424, 452, 424, 452, 424, 448, 424, 448, 424, 432, 448, 428, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 1308, 432, 440, 432, 448, 428, 444, 428, 444, 432, 440, 432, 444, 432, 440, 432, 1308, 428, 1308, 432, 1312, 432, 440, 432, 440, 432, 1308, 432, 448, 428, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 444, 428, 444, 428, 448, 432, 440, 432, 444, 428, 444, 428, 448, 428, 444, 432, 440, 432, 440, 432, 448, 428, 444, 428, 444, 432, 440, 432, 448, 428, 444, 428, 444, 428, 444, 432, 448, 428, 444, 428, 444, 432, 440, 428, 448, 432, 440, 428, 1312, 428, 1312, 428, 448, 428, 444, 428, 444, 432, 444, 428, 440, 432, 10416, 3496, 1760, 456, 420, 452, 1292, 448, 428, 452, 428, 448, 428, 448, 428, 448, 424, 432, 448, 432, 444, 432, 444, 428, 448, 428, 452, 428, 444, 432, 1316, 428, 444, 432, 448, 428, 448, 428, 448, 428, 444, 432, 448, 432, 444, 428, 1296, 428, 1280, 428, 1284, 428, 428, 432, 424, 432, 1276, 428, 432, 432, 428, 428, 428, 432, 424, 432, 428, 432, 428, 428, 428, 432, 424, 432, 432, 428, 428, 432, 424, 432, 424, 432, 444, 436, 1260, 448, 408, 448, 408, 452, 408, 452, 1256, 452, 1256, 452, 404, 452, 412, 448, 404, 452, 404, 452, 1260, 448, 408, 452, 1256, 452, 1260, 448, 408, 448, 412, 452, 404, 452, 404, 452, 408, 452, 408, 452, 404, 452, 408, 452, 400, 452, 1268, 452, 1260, 452, 1260, 448, 1264, 452, 1264, 452, 408, 448, 1264, 452, 404, 452, 1268, 452, 408, 448, 408, 452, 408, 452, 412, 452, 408, 456, 404, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 448, 412, 448, 412, 448, 408, 452, 416, 448, 408, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 404, 452, 408, 452, 412, 448, 412, 452, 408, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 448, 412, 448, 408, 452, 416, 448, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 448, 412, 452, 412, 448, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 404, 452, 1272, 452, 412, 448, 412, 448, 412, 452, 420, 448, 412, 452, 408, 452, 412, 452, 416, 452, 408, 452, 1268, 448, 1268, 452, 416, 452, 1264, 452, 412, 452, 412, 448, 420, 448, 412, 452, 1264, 452, 1268, 448, 420, 448, 1268, 452, 408, 452, 408, 452, 1272, 452};

//暖房(20℃, その他自動) Raw
//const uint16_t heaterValue[440] = {3492, 1772, 424, 440, 432, 1308, 432, 440, 432, 448, 432, 444, 428, 440, 432, 440, 432, 444, 432, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 1308, 428, 444, 432, 448, 428, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 1308, 428, 1312, 424, 1316, 432, 440, 432, 440, 432, 1308, 432, 448, 428, 444, 428, 444, 428, 444, 432, 444, 432, 440, 432, 444, 428, 444, 428, 448, 432, 440, 432, 444, 428, 444, 428, 448, 428, 444, 432, 440, 432, 444, 428, 448, 428, 444, 428, 444, 432, 444, 428, 448, 428, 444, 428, 444, 428, 444, 432, 448, 428, 444, 428, 444, 432, 440, 432, 444, 432, 440, 432, 1308, 428, 1312, 428, 448, 428, 444, 432, 440, 432, 444, 428, 440, 432, 10496, 3492, 1768, 432, 440, 432, 1312, 432, 444, 432, 448, 432, 444, 432, 444, 432, 444, 428, 452, 428, 448, 428, 444, 432, 444, 432, 448, 428, 444, 432, 1316, 448, 428, 428, 448, 432, 444, 428, 448, 428, 448, 428, 452, 428, 444, 428, 1316, 456, 1288, 452, 1304, 444, 424, 428, 444, 436, 1296, 452, 404, 432, 424, 436, 424, 436, 420, 436, 424, 440, 420, 436, 420, 440, 416, 444, 420, 436, 420, 440, 416, 428, 428, 428, 432, 428, 1280, 428, 428, 432, 428, 428, 432, 432, 424, 432, 424, 428, 1280, 432, 432, 428, 428, 428, 428, 428, 428, 428, 1284, 428, 428, 432, 1276, 432, 424, 432, 432, 428, 428, 432, 424, 432, 428, 428, 432, 428, 428, 432, 428, 428, 428, 428, 1288, 428, 1284, 428, 1284, 428, 1284, 428, 1288, 432, 424, 432, 1284, 428, 428, 432, 1288, 428, 432, 432, 428, 428, 428, 436, 428, 440, 420, 432, 428, 444, 420, 432, 428, 432, 428, 444, 416, 444, 416, 444, 420, 444, 416, 444, 416, 440, 420, 444, 416, 448, 412, 448, 1264, 440, 1272, 444, 420, 448, 412, 448, 412, 448, 412, 448, 416, 448, 412, 448, 412, 448, 412, 448, 416, 448, 408, 448, 1264, 444, 1268, 448, 416, 448, 412, 448, 412, 448, 412, 448, 416, 448, 412, 448, 412, 448, 412, 448, 412, 452, 412, 448, 408, 452, 408, 452, 412, 448, 412, 448, 412, 448, 412, 448, 416, 448, 412, 448, 412, 448, 412, 448, 416, 448, 408, 452, 412, 444, 412, 448, 1272, 444, 416, 452, 412, 448, 416, 448, 420, 448, 412, 452, 412, 448, 412, 448, 420, 452, 412, 448, 1268, 444, 1276, 444, 420, 452, 412, 448, 416, 448, 412, 452, 416, 448, 412, 448, 1272, 448, 412, 448, 1280, 444, 416, 448, 412, 452, 408, 452, 1272, 444};
//暖房(22℃, その他自動) Raw
const uint16_t heaterValue[440] = {3516, 1740, 456, 416, 456, 1284, 456, 416, 456, 424, 452, 420, 456, 416, 456, 420, 448, 428, 452, 420, 452, 424, 448, 420, 452, 428, 452, 416, 452, 1288, 452, 424, 452, 424, 448, 424, 452, 424, 448, 424, 452, 424, 452, 420, 448, 1288, 452, 1288, 448, 1296, 448, 424, 452, 420, 448, 1292, 448, 428, 448, 424, 452, 420, 452, 424, 448, 428, 448, 424, 448, 424, 452, 420, 452, 428, 448, 424, 448, 424, 448, 424, 448, 428, 448, 428, 448, 424, 448, 424, 444, 432, 448, 424, 452, 424, 448, 424, 448, 428, 448, 424, 448, 428, 448, 424, 448, 428, 448, 424, 448, 428, 444, 428, 448, 428, 448, 424, 448, 1288, 448, 1292, 444, 432, 452, 424, 448, 424, 448, 424, 448, 424, 444, 10460, 3536, 1744, 456, 420, 452, 1292, 456, 420, 452, 428, 452, 420, 456, 420, 456, 420, 448, 432, 448, 412, 444, 412, 448, 408, 448, 412, 452, 404, 452, 1260, 444, 412, 448, 412, 448, 408, 452, 408, 448, 408, 448, 412, 452, 404, 448, 1260, 448, 1260, 448, 1264, 444, 412, 452, 404, 448, 1260, 448, 416, 448, 404, 452, 408, 448, 408, 452, 408, 452, 408, 448, 408, 452, 404, 452, 408, 452, 408, 452, 404, 452, 404, 452, 408, 452, 1256, 452, 408, 448, 408, 452, 408, 452, 408, 448, 412, 444, 1260, 452, 408, 452, 408, 448, 404, 452, 1256, 452, 1260, 452, 404, 452, 1256, 452, 404, 452, 412, 452, 404, 452, 404, 452, 404, 452, 412, 448, 408, 452, 404, 452, 404, 452, 1268, 452, 1260, 452, 1260, 448, 1264, 448, 1272, 448, 404, 452, 1264, 452, 404, 452, 1268, 448, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 412, 448, 408, 452, 412, 452, 408, 448, 412, 448, 412, 452, 412, 452, 408, 448, 408, 452, 408, 452, 412, 452, 408, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 448, 416, 448, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 1260, 452, 1260, 452, 412, 452, 408, 452, 408, 452, 408, 448, 416, 452, 404, 452, 408, 452, 412, 448, 412, 452, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 408, 448, 416, 448, 408, 452, 408, 452, 408, 452, 412, 452, 408, 452, 408, 452, 404, 452, 1272, 452, 412, 448, 412, 452, 412, 448, 420, 452, 408, 452, 412, 448, 412, 452, 416, 452, 408, 452, 1268, 452, 1264, 452, 416, 452, 412, 452, 412, 448, 412, 452, 416, 452, 408, 452, 1264, 452, 1268, 452, 1272, 452, 408, 452, 412, 452, 408, 452, 1268, 452};

//停止 Raw
const uint16_t stopValue[440] = {3536, 1740, 448, 416, 456, 1272, 432, 432, 456, 416, 456, 412, 452, 436, 412, 440, 424, 444, 424, 440, 424, 452, 416, 460, 404, 448, 424, 436, 428, 1320, 408, 444, 424, 448, 420, 440, 428, 436, 428, 440, 428, 460, 408, 440, 424, 1324, 404, 1320, 404, 1324, 408, 432, 456, 412, 452, 1300, 404, 440, 456, 412, 452, 432, 432, 420, 428, 440, 428, 456, 408, 448, 420, 440, 424, 448, 424, 464, 404, 452, 412, 440, 428, 448, 420, 460, 408, 436, 428, 464, 404, 464, 408, 460, 404, 456, 408, 444, 424, 460, 412, 460, 404, 464, 404, 464, 400, 468, 404, 444, 404, 448, 404, 436, 412, 452, 404, 444, 404, 1288, 404, 1284, 408, 428, 452, 400, 448, 400, 448, 400, 432, 436, 408, 10252, 3516, 1744, 428, 420, 456, 1268, 408, 420, 456, 400, 456, 396, 456, 396, 456, 396, 456, 404, 452, 400, 452, 400, 452, 404, 444, 432, 408, 428, 420, 1296, 404, 424, 428, 444, 412, 440, 412, 448, 404, 444, 408, 432, 424, 424, 424, 1296, 404, 1296, 400, 1300, 404, 424, 428, 436, 412, 1300, 400, 448, 408, 428, 424, 444, 408, 452, 400, 432, 424, 452, 400, 436, 420, 432, 420, 428, 428, 424, 428, 424, 428, 424, 428, 428, 428, 424, 428, 428, 424, 424, 428, 428, 428, 424, 428, 424, 428, 1296, 400, 432, 424, 428, 424, 428, 428, 424, 424, 1300, 404, 424, 428, 1272, 424, 424, 448, 420, 420, 432, 420, 424, 428, 440, 408, 432, 428, 428, 424, 424, 428, 424, 424, 1304, 404, 1272, 432, 1272, 452, 1204, 496, 1256, 452, 404, 452, 1240, 448, 416, 456, 1252, 448, 404, 456, 400, 456, 396, 456, 408, 444, 416, 424, 424, 428, 452, 404, 436, 424, 424, 428, 448, 408, 448, 408, 432, 424, 452, 404, 444, 412, 448, 404, 460, 400, 440, 412, 1300, 404, 1300, 400, 432, 452, 404, 448, 428, 420, 416, 428, 432, 424, 428, 428, 448, 404, 440, 416, 432, 428, 432, 420, 1300, 400, 1296, 408, 432, 448, 408, 444, 408, 432, 444, 408, 436, 424, 448, 404, 440, 416, 452, 404, 444, 412, 452, 404, 448, 408, 452, 400, 456, 404, 444, 412, 444, 408, 448, 408, 452, 408, 452, 400, 436, 420, 444, 412, 456, 400, 452, 404, 452, 404, 452, 400, 1308, 404, 448, 412, 428, 428, 432, 424, 452, 416, 432, 420, 456, 400, 456, 404, 460, 400, 452, 404, 1304, 404, 1308, 400, 436, 452, 408, 444, 412, 428, 444, 412, 452, 412, 1304, 404, 432, 432, 424, 428, 1308, 404, 428, 448, 412, 428, 444, 408, 1304, 408};


void setup()
{
  Serial.begin(115200);
  
  // Initialise wifi connection
  wifiConnected = connectWifi();
  
  if(wifiConnected){
    
    // Define your devices here. 
    //テレビ
    espalexa.addDevice("TV Power",   controlTVPower,   EspalexaDeviceType::onoff, 0);   //non-dimmable device
    espalexa.addDevice("TV Channel", controlTVChannel, EspalexaDeviceType::onoff, 0);   //non-dimmable device
    espalexa.addDevice("TV Volume",  controlTVVolume,  EspalexaDeviceType::onoff, 255); //non-dimmable device
    //エアコン
    espalexa.addDevice("AC",      controlAC,      EspalexaDeviceType::onoff, 0); //non-dimmable device
    espalexa.addDevice("Heater",  controlHeater,  EspalexaDeviceType::onoff, 0); //non-dimmable device
    
    espalexa.begin();
    Serial.println("Completed");
    
  }else{
    while (1) {
      Serial.println("Cannot connect to WiFi. Please check data and reset the ESP.");
      delay(2500);
    }
  }
  
  irsend.begin();
}
 
void loop()
{
   espalexa.loop();
   delay(1);
}



//our callback functions
//テレビ
void controlTVPower(EspalexaDevice* d){
  if (d == nullptr) return; //this is good practice, but not required

  Serial.print("TV changed to ");
  if (d->getValue()){
    success = irsend.send(protocolTV, powerValue, powerSize); //送信
    if(success){ Serial.println("ON"); }
  }else {
    success = irsend.send(protocolTV, powerValue, powerSize); //送信
    if(success){ Serial.println("OFF"); }
  }
}

void controlTVChannel(EspalexaDevice* d){
  if (d == nullptr) return; //this is good practice, but not required

  Serial.print("TV changed to ");
  if (d->getValue()){
    success = irsend.send(protocolTV, channelUpValue, channelUpSize); //送信
    if(success){ Serial.println("Channel+"); }
  }else {
    success = irsend.send(protocolTV, channelDownValue, channelDownSize); //送信
    if(success){ Serial.println("Channel-"); }
  }
}

void controlTVVolume(EspalexaDevice* d){
  if (d == nullptr) return; //this is good practice, but not required

  Serial.print("TV changed to ");
  if (d->getValue()){
    success = irsend.send(protocolTV, muteValue, muteSize); //送信
    if(success){ Serial.println("Volume ON"); }
  }else {
    success = irsend.send(protocolTV, muteValue, muteSize); //送信
    if(success){ Serial.println("Mute"); }
  }
}

//エアコン
void controlAC(EspalexaDevice* d){
  if (d == nullptr) return; //this is good practice, but not required

  Serial.print("AC changed to ");
  if (d->getValue()){
    
    irsend.sendRaw(acValue, sizeof(acValue) / sizeof(acValue[0]), khz);
    Serial.println("ON");
  }else {

    irsend.sendRaw(stopValue, sizeof(stopValue) / sizeof(stopValue[0]), khz);
    Serial.println("OFF");
  }
}

void controlHeater(EspalexaDevice* d){
  if (d == nullptr) return; //this is good practice, but not required

  Serial.print("Heater changed to ");
  if (d->getValue()){

    irsend.sendRaw(heaterValue, sizeof(heaterValue) / sizeof(heaterValue[0]), khz);
    Serial.println("ON");
  }else {

    irsend.sendRaw(stopValue, sizeof(stopValue) / sizeof(stopValue[0]), khz);
    Serial.println("OFF");
  }
}
  


// connect to wifi – returns true if successful or false if not
boolean connectWifi(){
  boolean state = true;
  int i = 0;
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");
  Serial.println("Connecting to WiFi");

  // Wait for connection
  Serial.print("Connecting...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (i > 20){
      state = false; break;
    }
    i++;
  }
  Serial.println("");
  if (state){
    Serial.print("Connected to ");
    Serial.println(ssid);
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  }
  else {
    Serial.println("Connection failed.");
  }
  return state;
}
